const axios = require('axios');

// API endpoint ƒë·ªÉ l·∫•y d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ Vi·ªát Nam
const WAQI_API_URL = 'https://api.waqi.info/search/?token=0a5f48f1c6c68b50b51688342a16d0ae482e9d1a&keyword=vietnam';

// Gemini AI API Configuration
const GEMINI_API_KEY = 'AIzaSyAP3V9hzwZpt_Am1NKycYcklJf0TpHBrdo';
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

// Simple cache ƒë·ªÉ tr√°nh spam API
const commentCache = new Map();
const CACHE_DURATION = 300000; // 5 ph√∫t

// Cleanup cache m·ªói 10 ph√∫t
setInterval(() => {
    const now = Date.now();
    for (const [key, value] of commentCache.entries()) {
        if ((now - value.timestamp) > CACHE_DURATION) {
            commentCache.delete(key);
        }
    }
    if (commentCache.size > 0) {
        console.log(`üßπ Cache cleanup: ${commentCache.size} items remaining`);
    }
}, 600000); // 10 ph√∫t

/**
 * Ph√¢n lo·∫°i m·ª©c ƒë·ªô √¥ nhi·ªÖm theo AQI
 * @param {number} aqi - Ch·ªâ s·ªë AQI
 * @returns {Object} - Th√¥ng tin m·ª©c ƒë·ªô v√† m√†u s·∫Øc
 */
function getAQILevel(aqi) {
    if (aqi <= 50) {
        return {
            level: 'T·ªët',
            color: '#00e400',
            description: 'Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ t·ªët, an to√†n cho s·ª©c kh·ªèe',
            health: 'Kh√¥ng c√≥ t√°c ƒë·ªông ƒë·∫øn s·ª©c kh·ªèe'
        };
    } else if (aqi <= 100) {
        return {
            level: 'Trung b√¨nh',
            color: '#ffff00',
            description: 'Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ ch·∫•p nh·∫≠n ƒë∆∞·ª£c',
            health: 'Nh√≥m nh·∫°y c·∫£m c√≥ th·ªÉ g·∫∑p v·∫•n ƒë·ªÅ nh·∫π'
        };
    } else if (aqi <= 150) {
        return {
            level: 'Kh√¥ng t·ªët cho nh√≥m nh·∫°y c·∫£m',
            color: '#ff7e00',
            description: 'Kh√¥ng kh·ªèe m·∫°nh cho nh√≥m nh·∫°y c·∫£m',
            health: 'Tr·∫ª em, ng∆∞·ªùi gi√† n√™n h·∫°n ch·∫ø ho·∫°t ƒë·ªông ngo√†i tr·ªùi'
        };
    } else if (aqi <= 200) {
        return {
            level: 'C√≥ h·∫°i cho s·ª©c kh·ªèe',
            color: '#ff0000',
            description: 'M·ªçi ng∆∞·ªùi c√≥ th·ªÉ g·∫∑p v·∫•n ƒë·ªÅ s·ª©c kh·ªèe',
            health: 'N√™n h·∫°n ch·∫ø ra ngo√†i, ƒëeo kh·∫©u trang'
        };
    } else if (aqi <= 300) {
        return {
            level: 'R·∫•t c√≥ h·∫°i',
            color: '#8f3f97',
            description: 'C·∫£nh b√°o s·ª©c kh·ªèe nghi√™m tr·ªçng',
            health: 'Tr√°nh ra ngo√†i tr·ªùi, ƒë√≥ng c·ª≠a s·ªï'
        };
    } else {
        return {
            level: 'Nguy hi·ªÉm',
            color: '#7e0023',
            description: 'T√¨nh tr·∫°ng kh·∫©n c·∫•p v·ªÅ s·ª©c kh·ªèe',
            health: 'M·ªçi ng∆∞·ªùi n√™n ·ªü trong nh√† v√† tr√°nh ho·∫°t ƒë·ªông ngo√†i tr·ªùi'
        };
    }
}

/**
 * L·∫•y t√™n t·ªânh/th√†nh ph·ªë t·ª´ t√™n tr·∫°m ƒëo
 * @param {string} stationName - T√™n tr·∫°m ƒëo
 * @returns {string} - T√™n t·ªânh/th√†nh ph·ªë
 */
function extractProvinceName(stationName) {
    // T√°ch l·∫•y ph·∫ßn t·ªânh/th√†nh ph·ªë t·ª´ t√™n tr·∫°m
    if (stationName.includes('/')) {
        const parts = stationName.split('/');
        return parts[0].trim();
    }
    
    // N·∫øu c√≥ "Vietnam" th√¨ l·∫•y ph·∫ßn tr∆∞·ªõc ƒë√≥
    if (stationName.includes(', Vietnam')) {
        return stationName.split(', Vietnam')[0].trim();
    }
    
    return stationName;
}

/**
 * Format th·ªùi gian
 * @param {Object} timeData - D·ªØ li·ªáu th·ªùi gian
 * @returns {string} - Th·ªùi gian ƒë√£ format
 */
function formatTime(timeData) {
    if (!timeData || !timeData.stime) return 'Kh√¥ng x√°c ƒë·ªãnh';
    
    const date = new Date(timeData.stime);
    return date.toLocaleString('vi-VN', {
        timeZone: 'Asia/Ho_Chi_Minh',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

/**
 * L·∫•y d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ t·ª´ API WAQI
 * @returns {Promise<Object>} - D·ªØ li·ªáu t·ª´ API
 */
async function fetchAirQualityData() {
    try {
        console.log('üåç ƒêang l·∫•y d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ Vi·ªát Nam...');
        
        const response = await axios.get(WAQI_API_URL, {
            timeout: 15000,
            headers: {
                'User-Agent': 'Kaiyo-Api/1.0',
                'Accept': 'application/json'
            }
        });

        if (response.data && response.data.status === 'ok' && response.data.data) {
            console.log(`‚úÖ L·∫•y ƒë∆∞·ª£c ${response.data.data.length} tr·∫°m ƒëo`);
            return response.data;
        } else {
            throw new Error('D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá');
        }

    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:', error.message);
        throw error;
    }
}

/**
 * T·∫°o nh·∫≠n x√©t AI s·ª≠ d·ª•ng Gemini
 * @param {number} aqi - Ch·ªâ s·ªë AQI
 * @param {string} province - T√™n t·ªânh/th√†nh ph·ªë
 * @param {string} time - Th·ªùi gian ƒëo
 * @param {string} level - M·ª©c ƒë·ªô √¥ nhi·ªÖm
 * @returns {Promise<Object>} - Nh·∫≠n x√©t AI t·ª´ Gemini
 */
async function generateAICommentWithGemini(aqi, province, time, level) {
    try {
        // Check cache tr∆∞·ªõc khi g·ªçi API
        const cacheKey = `${province}-${aqi}-${level}`;
        const cachedResult = commentCache.get(cacheKey);
        
        if (cachedResult && (Date.now() - cachedResult.timestamp) < CACHE_DURATION) {
            console.log(`üíæ Cache hit for ${province} AQI ${aqi}`);
            return cachedResult.data;
        }

        const hour = new Date().getHours();
        let timeOfDay = "trong ng√†y";
        if (hour >= 6 && hour <= 11) timeOfDay = "bu·ªïi s√°ng";
        else if (hour >= 12 && hour <= 17) timeOfDay = "bu·ªïi chi·ªÅu";
        else if (hour >= 18 || hour <= 5) timeOfDay = "bu·ªïi t·ªëi/ƒë√™m";

        // X√°c ƒë·ªãnh m√πa trong nƒÉm
        const month = new Date().getMonth() + 1; // 1-12
        let season = "m√πa kh√¥";
        if (month >= 5 && month <= 10) {
            season = "m√πa m∆∞a";
        } else {
            season = "m√πa kh√¥";
        }

        // T·∫°o prompt ƒë∆°n gi·∫£n cho Gemini (tr√°nh 503)
        const prompt = `Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠:

üìç ${province}, Vi·ªát Nam  
üìä AQI: ${aqi} (${level})
‚è∞ ${timeOfDay}, ${season}

Y√™u c·∫ßu:
- Nh·∫≠n x√©t ng·∫Øn g·ªçn v·ªÅ AQI ${aqi} t·∫°i ${province}
- Nguy√™n nh√¢n c√≥ th·ªÉ (giao th√¥ng/c√¥ng nghi·ªáp/th·ªùi ti·∫øt)
- L·ªùi khuy√™n cho ng∆∞·ªùi d√¢n
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- T·ªëi ƒëa 60 t·ª´

V√≠ d·ª•: "üå´Ô∏è H√† N·ªôi AQI 120 - m·ª©c v·ª´a ph·∫£i. C√≥ th·ªÉ do giao th√¥ng ƒë√¥ng ƒë√∫c. üò∑ Khuy√™n ƒëeo kh·∫©u trang khi ra ngo√†i!"`;

        // Retry mechanism ƒë·ªÉ x·ª≠ l√Ω 503
        let response;
        let retryCount = 0;
        const maxRetries = 2;
        
        while (retryCount <= maxRetries) {
            try {
                response = await axios.post(GEMINI_API_URL, {
                    contents: [
                        {
                            role: 'user',
                            parts: [{ text: prompt }],
                        },
                    ],
                    generationConfig: {
                        temperature: 0.7,
                        maxOutputTokens: 100, // Gi·∫£m ƒë·ªÉ tr√°nh 503
                        topK: 20,
                        topP: 0.8
                    }
                }, {
                    timeout: 8000, // Gi·∫£m timeout
                    headers: { 
                        'Content-Type': 'application/json',
                        'User-Agent': 'Kaiyo-Api/1.0'
                    }
                });
                
                break; // Th√†nh c√¥ng, tho√°t loop
                
            } catch (retryError) {
                retryCount++;
                console.log(`üîÑ Retry ${retryCount}/${maxRetries} - Gemini Error: ${retryError.response?.status || retryError.message}`);
                
                if (retryCount > maxRetries) {
                    throw retryError; // ƒê√£ h·∫øt retry, throw error
                }
                
                // ƒê·ª£i 1s tr∆∞·ªõc khi retry
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        const data = response.data;
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
            const aiComment = data.candidates[0].content.parts[0].text.trim();
            
            const result = {
                success: true,
                aiName: "Gemini AI",
                personality: "chuy√™n gia m√¥i tr∆∞·ªùng",
                emoji: "ü§ñ",
                mainComment: aiComment,
                timeOfDay: timeOfDay,
                season: season,
                confidence: Math.floor(Math.random() * 20) + 80, // 80-99%
                analysisId: `GEMINI-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
                source: "Google Gemini 2.0 Flash"
            };

            // Cache k·∫øt qu·∫£
            commentCache.set(cacheKey, {
                data: result,
                timestamp: Date.now()
            });

            return result;
        } else {
            throw new Error('Invalid Gemini API response format');
        }

    } catch (error) {
        console.error('‚ùå Gemini AI Error:', error.message);
        
        // T√≠nh to√°n timeOfDay v√† season cho fallback
        const hour = new Date().getHours();
        let fallbackTimeOfDay = "trong ng√†y";
        if (hour >= 6 && hour <= 11) fallbackTimeOfDay = "bu·ªïi s√°ng";
        else if (hour >= 12 && hour <= 17) fallbackTimeOfDay = "bu·ªïi chi·ªÅu";
        else if (hour >= 18 || hour <= 5) fallbackTimeOfDay = "bu·ªïi t·ªëi/ƒë√™m";

        const month = new Date().getMonth() + 1;
        let fallbackSeason = (month >= 5 && month <= 10) ? "m√πa m∆∞a" : "m√πa kh√¥";
        
        // Fallback comment n·∫øu Gemini fails
        const fallbackComments = [
            `ü§ñ AI: "${province} hi·ªán c√≥ AQI ${aqi} (${level}). H√£y c·∫©n th·∫≠n v·ªõi ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠!"`,
            `üåç AI: "Ch·ªâ s·ªë √¥ nhi·ªÖm ${aqi} t·∫°i ${province} - ${level}. Theo d√µi s·ª©c kh·ªèe nh√©!"`,
            `üîç AI: "${province} ƒëang c√≥ AQI ${aqi}. M·ª©c ƒë·ªô ${level} - h√£y ch√∫ √Ω b·∫£o v·ªá s·ª©c kh·ªèe!"`,
            `üí® AI: "T√¨nh h√¨nh kh√¥ng kh√≠ ${province}: AQI ${aqi} - ${level}. H√£y quan t√¢m s·ª©c kh·ªèe!"`,
            `üå´Ô∏è AI: "${province} v·ªõi ch·ªâ s·ªë ${aqi} thu·ªôc m·ª©c ${level}. C·∫ßn ch√∫ √Ω b·∫£o v·ªá h√¥ h·∫•p!"`
        ];
        
        const fallbackComment = fallbackComments[Math.floor(Math.random() * fallbackComments.length)];
        
        return {
            success: false,
            aiName: "Backup AI",
            personality: "c∆° b·∫£n",  
            emoji: "ü§ñ",
            mainComment: fallbackComment,
            timeOfDay: fallbackTimeOfDay,
            season: fallbackSeason,
            confidence: 75,
            analysisId: `BACKUP-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
            source: "Fallback System",
            error: error.message
        };
    }
}

/**
 * Ch·ªçn ng·∫´u nhi√™n m·ªôt tr·∫°m ƒëo v√† format d·ªØ li·ªáu
 * @param {Object} apiData - D·ªØ li·ªáu t·ª´ API
 * @returns {Object} - Th√¥ng tin tr·∫°m ƒëo ƒë√£ format
 */
async function getRandomStation(apiData) {
    const stations = apiData.data;
    
    if (!stations || stations.length === 0) {
        throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫°m ƒëo');
    }

    // Ch·ªçn ng·∫´u nhi√™n m·ªôt tr·∫°m
    const randomIndex = Math.floor(Math.random() * stations.length);
    const station = stations[randomIndex];

    const aqi = parseInt(station.aqi);
    const aqiInfo = getAQILevel(aqi);
    const provinceName = extractProvinceName(station.station.name);
    const timeFormatted = formatTime(station.time);

    // T·∫°o nh·∫≠n x√©t AI b·∫±ng Gemini
    console.log(`ü§ñ ƒêang t·∫°o nh·∫≠n x√©t AI cho ${provinceName} v·ªõi AQI ${aqi}...`);
    const aiComment = await generateAICommentWithGemini(aqi, provinceName, timeFormatted, aqiInfo.level);

    return {
        success: true,
        province: provinceName,
        station: {
            name: station.station.name,
            uid: station.uid,
            coordinates: {
                latitude: station.station.geo[0],
                longitude: station.station.geo[1]
            },
            url: `https://aqicn.org/${station.station.url}`
        },
        airQuality: {
            aqi: aqi,
            level: aqiInfo.level,
            color: aqiInfo.color,
            description: aqiInfo.description,
            healthAdvice: aqiInfo.health
        },
        time: {
            measured: timeFormatted,
            timezone: station.time?.tz || '+07:00',
            timestamp: station.time?.vtime
        },
        aiAnalysis: aiComment,
        metadata: {
            totalStations: stations.length,
            selectedIndex: randomIndex + 1,
            source: 'World Air Quality Index (WAQI)',
            timestamp: new Date().toISOString()
        }
    };
}

// API Handler cho route /api/onhiem
async function onhiemHandler(req, res) {
    try {
        console.log('üîç API Request: L·∫•y d·ªØ li·ªáu √¥ nhi·ªÖm ng·∫´u nhi√™n');

        // L·∫•y d·ªØ li·ªáu t·ª´ API WAQI
        const apiData = await fetchAirQualityData();

        // Ch·ªçn ng·∫´u nhi√™n v√† format v·ªõi AI comment
        const result = await getRandomStation(apiData);

        console.log(`üìç ƒê√£ ch·ªçn: ${result.province} - AQI: ${result.airQuality.aqi} (${result.airQuality.level})`);

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        res.json(result);

    } catch (error) {
        console.error('‚ùå API Error:', error.message);
        
        // Tr·∫£ v·ªÅ l·ªói v·ªõi format nh·∫•t qu√°n
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠',
            error: error.message,
            timestamp: new Date().toISOString(),
            suggestion: 'Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t'
        });
    }
}

// Export handler function cho auto scan
module.exports = onhiemHandler;
